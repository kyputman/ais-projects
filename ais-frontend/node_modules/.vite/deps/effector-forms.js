import {
  a
} from "./chunk-7XS2FXID.js";
import "./chunk-ZOIWZPCO.js";
import {
  $,
  S,
  d,
  ke,
  m,
  p,
  z
} from "./chunk-5OLYA55J.js";
import "./chunk-DFKQJ226.js";

// node_modules/effector-forms/dist/index.js
var d2 = { store: function({ init: e, domain: i, existing: n }, o) {
  return n || (i ? i.store(e, { and: o, sid: "-efg263" }) : p(e, { and: o, sid: "-dyefrw" }));
}, event: function({ domain: e, existing: r }) {
  return r || (e ? e.event({ sid: "-y6riru" }) : d({ sid: "-y6rhv4" }));
} };
function u(r, i, n, o) {
  var s, t, a2, u2, l2, m3, c2, v2, f2, h, g;
  const E = "function" == typeof i.init ? i.init() : i.init, x = d2.store({ domain: n, existing: null === (s = i.units) || void 0 === s ? void 0 : s.$value, init: E }, { and: o, name: "$value", sid: "yg99i6" }), V = d2.store({ domain: n, existing: null === (t = i.units) || void 0 === t ? void 0 : t.$errors, init: [] }, { and: o, name: "$errors", sid: "-y2xdpq" }), p2 = V.map((e) => e[0] ? e[0] : null), $2 = x.map((e) => e !== E), y = d2.store({ domain: n, existing: null === (a2 = i.units) || void 0 === a2 ? void 0 : a2.$isTouched, init: false }, { and: o, name: "$touched", sid: "sulkei" }), b = d2.event({ domain: n, existing: null === (u2 = i.units) || void 0 === u2 ? void 0 : u2.onChange }, { name: "onChange", sid: "-bvxucw" }), k = d2.event({ domain: n, existing: null === (l2 = i.units) || void 0 === l2 ? void 0 : l2.onBlur }, { name: "onBlur", sid: "mo0ar0" }), T = d2.event({ domain: n, existing: null === (m3 = i.units) || void 0 === m3 ? void 0 : m3.changed }, { name: "changed", sid: "bcod8v" }), w = d2.event({ domain: n, existing: null === (c2 = i.units) || void 0 === c2 ? void 0 : c2.addError }, { name: "addError", sid: "3cou8n" }), F = d2.event({ domain: n, existing: null === (v2 = i.units) || void 0 === v2 ? void 0 : v2.validate }, { name: "validate", sid: "-s3sqr5" }), j = d2.event({ domain: n, existing: null === (f2 = i.units) || void 0 === f2 ? void 0 : f2.resetErrors }, { name: "resetErrors", sid: "z8u2jo" }), D = d2.event({ domain: n, existing: null === (h = i.units) || void 0 === h ? void 0 : h.resetValue }, { name: "resetValue", sid: "-x0qhaf" }), B = d2.event({ domain: n, existing: null === (g = i.units) || void 0 === g ? void 0 : g.reset }, { name: "reset", sid: "ocz45p" }), O = p2.map((e) => null === e);
  return { changed: T, name: r, $value: x, $errors: V, $firstError: p2, $isValid: O, $isDirty: $2, $isTouched: y, $touched: y, $field: m({ and: [{ value: x, errors: V, firstError: p2, isValid: O, isDirty: $2, isTouched: y }], or: { name: "$field", sid: "-vj0i5c" } }), onChange: b, onBlur: k, addError: w, validate: F, set: b, reset: B, resetErrors: j, resetValue: D, filter: i.filter };
}
function l({ $form: i, validateFormEvent: s, submitEvent: t, resetFormEvent: a2, resetValues: d3, field: u2, rules: l2, resetErrors: m3, formValidationEvents: c2, fieldValidationEvents: v2 }, f2) {
  const { $value: h, $errors: g, onBlur: E, changed: x, addError: V, validate: p2, resetErrors: $2, resetValue: y, reset: b } = u2, k = "function" == typeof l2 ? p([], { and: f2, name: "rulesSources", sid: "-9d7qjb" }) : m({ and: [l2.map(({ source: e }) => e || p(null, { and: f2, name: "and", sid: "5j6y42" }))], or: { name: "rulesSources", sid: "-8w6454" } }), T = (w = l2, (e, r, i2) => {
    const n = [], o = "function" == typeof w ? w(e, r) : w;
    for (let s2 = 0; s2 < o.length; s2++) {
      const t2 = o[s2], a3 = i2 ? i2[s2] : null, d4 = t2.validator(e, r, a3);
      "boolean" != typeof d4 || d4 || n.push({ rule: t2.name, errorText: t2.errorText, value: e }), "object" != typeof d4 || d4.isValid || n.push({ rule: t2.name, errorText: d4.errorText, value: e });
    }
    return n;
  });
  var w;
  const F = [...c2, ...v2], j = [];
  if (F.includes("submit")) {
    const r = z({ and: [{ source: m({ and: [{ fieldValue: h, form: i, rulesSources: k }], or: { name: "source", sid: "-k8128n" } }), clock: t }], or: { name: "validationTrigger", sid: "-6xbmu5" } });
    j.push(r);
  }
  F.includes("blur") && j.push(z({ and: [{ source: m({ and: [{ fieldValue: h, form: i, rulesSources: k }], or: { name: "source", sid: "pucwwk" } }), clock: E }], or: { sid: "-m25isl" } })), F.includes("change") && j.push(z({ and: [{ source: m({ and: [{ fieldValue: h, form: i, rulesSources: k }], or: { name: "source", sid: "-uicuuj" } }), clock: S([x, y, d3], { name: "clock", sid: "wzy69w" }) }], or: { sid: "-7dr8kk" } })), j.push(z({ and: [{ source: m({ and: [{ fieldValue: h, form: i, rulesSources: k }], or: { name: "source", sid: "-gb07m8" } }), clock: p2 }], or: { sid: "6tlenr" } })), j.push(z({ and: [{ source: m({ and: [{ fieldValue: h, form: i, rulesSources: k }], or: { name: "source", sid: "-2kp66l" } }), clock: s }], or: { sid: "kjwg3e" } }));
  const D = z({ and: [{ source: h, clock: V, fn: (e, { rule: r, errorText: i2 }) => ({ rule: r, value: e, errorText: i2 }) }], or: { name: "addErrorWithValue", sid: "-vn5aoo" } });
  g.on(j, (e, { form: r, fieldValue: i2, rulesSources: n }) => T(i2, r, n)).on(D, (e, r) => [r, ...e]).reset($2, a2, b, m3), F.includes("change") || g.reset(x);
}
function m2({ $value: e, $touched: r, onChange: i, changed: n, name: o, reset: t, resetValue: a2, filter: d3 }, u2, l2, m3, c2) {
  r.on(n, () => true).reset(t, l2, m3), $({ and: [{ source: i, filter: d3 || (() => true), target: n }], or: { sid: "-ylchks" } }), e.on(n, (e2, r2) => r2).on(u2, (e2, r2) => r2.hasOwnProperty(o) ? r2[o] : e2).reset(t, a2, c2, l2);
}
function c(r) {
  const { filter: i, domain: o, fields: a2, validateOn: c2, units: v2 } = r, f2 = {}, h = [], g = [];
  for (const e in a2) {
    if (!a2.hasOwnProperty(e))
      continue;
    const r2 = a2[e], i2 = ke({ sid: "tpjlm9", fn: () => u(e, r2, o, { sid: e }), name: "field", method: "createField" });
    f2[e] = i2, h.push(i2.$isDirty), g.push(i2.$touched);
  }
  const E = function(r2) {
    const i2 = {};
    for (const e in r2)
      r2.hasOwnProperty(e) && (i2[e] = r2[e].$value);
    return m({ and: [i2], or: { sid: "3r0gj3" } });
  }(f2), x = function(r2) {
    const i2 = [];
    for (const e in r2) {
      if (!r2.hasOwnProperty(e))
        continue;
      const { $firstError: n } = r2[e];
      i2.push(n);
    }
    return m({ and: [i2], or: { name: "$firstErrors", sid: "-1vosn1" } }).map((e) => e.every((e2) => null === e2));
  }(f2), V = i ? m({ and: [x, i, (e, r2) => e && r2], or: { name: "$isFormValid", sid: "-mzafst" } }) : x, p2 = m({ and: [h], or: { name: "$isDirty", sid: "-dlthzi" } }).map((e) => e.some(Boolean)), $2 = m({ and: [g], or: { name: "$touched", sid: "-tje8ud" } }).map((e) => e.some(Boolean)), y = m({ and: [{ isValid: x, isDirty: p2, touched: $2 }], or: { name: "$meta", sid: "2bfvkz" } }), b = d2.event({ domain: o, existing: null == v2 ? void 0 : v2.validate }, { name: "validate", sid: "yvbjh5" }), k = d2.event({ domain: o, existing: null == v2 ? void 0 : v2.submit }, { name: "submitForm", sid: "4v9jaw" }), T = d2.event({ domain: o, existing: null == v2 ? void 0 : v2.formValidated }, { name: "formValidated", sid: "q51mub" }), w = d2.event({ domain: o, existing: null == v2 ? void 0 : v2.setForm }, { name: "setForm", sid: "-myvat3" }), F = d2.event({ domain: o, existing: null == v2 ? void 0 : v2.reset }, { name: "resetForm", sid: "-khripr" }), j = d2.event({ domain: o, existing: null == v2 ? void 0 : v2.resetValues }, { name: "resetValues", sid: "ygut7h" }), D = d2.event({ domain: o, existing: null == v2 ? void 0 : v2.resetErrors }, { name: "resetErrors", sid: "-wgu0qt" }), B = d2.event({ domain: o, existing: null == v2 ? void 0 : v2.resetTouched }, { name: "resetTouched", sid: "x0xold" }), O = z({ and: [{ source: E, clock: k }], or: { name: "submitWithFormData", sid: "-6a1prv" } }), C = z({ and: [{ source: E, clock: b }], or: { name: "validateWithFormData", sid: "-wefxh0" } });
  for (const e in f2) {
    if (!f2.hasOwnProperty(e))
      continue;
    const r2 = a2[e], i2 = f2[e];
    ke({ sid: "oj3q0b", fn: () => m2(i2, w, F, B, j), name: "none", method: "bindChangeEvent" }), r2.rules && ke({ sid: "okr3se", fn: () => l({ $form: E, rules: r2.rules, submitEvent: k, resetFormEvent: F, resetValues: j, resetErrors: D, validateFormEvent: b, field: i2, formValidationEvents: c2 || ["submit"], fieldValidationEvents: r2.validateOn ? r2.validateOn : [] }, { sid: e }), name: "none", method: "bindValidation" });
  }
  return $({ and: [{ source: O, filter: V, target: T }], or: { sid: "2vvi0m" } }), $({ and: [{ source: C, filter: V, target: T }], or: { sid: "2z69ks" } }), { fields: f2, $values: E, $eachValid: x, $isValid: x, $isDirty: p2, $touched: $2, $meta: y, submit: k, validate: b, resetTouched: B, reset: F, resetValues: j, resetErrors: D, setForm: w, set: w, formValidated: T };
}
function v(e) {
  const { value: r, errors: i, firstError: n, isValid: o, isDirty: s, isTouched: t } = a(e.$field);
  return { name: e.name, value: r, errors: i, firstError: n, isValid: o, isDirty: s, touched: t, isTouched: t, onChange: e.onChange, onBlur: e.onBlur, addError: e.addError, validate: e.validate, reset: e.reset, set: e.onChange, resetErrors: e.resetErrors, hasError: () => null !== n, errorText: (e2) => n ? e2 && e2[n.rule] ? e2[n.rule] : n.errorText || "" : "" };
}
function f(e) {
  const r = {}, i = {};
  for (const n2 in e.fields) {
    if (!e.fields.hasOwnProperty(n2))
      continue;
    const o2 = v(e.fields[n2]);
    r[n2] = o2, i[n2] = o2.value;
  }
  const { isValid: n, isDirty: o, touched: s } = a(e.$meta);
  return { fields: r, values: i, hasError: (e2) => e2 ? !!r[e2] && Boolean(r[e2].firstError) : !n, eachValid: n, isValid: n, isDirty: o, isTouched: s, touched: s, errors: (e2) => r[e2] ? r[e2].errors : [], error: (e2) => r[e2] ? r[e2].firstError : null, errorText: (e2, i2) => {
    const n2 = r[e2];
    return n2 && n2.firstError ? i2 && i2[n2.firstError.rule] ? i2[n2.firstError.rule] : n2.firstError.errorText || "" : "";
  }, reset: e.reset, submit: e.submit, setForm: e.setForm, set: e.setForm, formValidated: e.formValidated };
}
export {
  c as createForm,
  v as useField,
  f as useForm
};
//# sourceMappingURL=effector-forms.js.map
